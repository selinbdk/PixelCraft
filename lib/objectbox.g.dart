// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'core/models/response/generate_response_model.dart';
import 'core/models/response/image_response_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 7101666246175766652),
      name: 'GenerateResponseModel',
      lastPropertyId: const obx_int.IdUid(1, 5504849846114445160),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5504849846114445160),
            name: 'id',
            type: 6,
            flags: 1)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(2, 4393088303053281707),
            name: 'artifacts',
            targetId: const obx_int.IdUid(2, 1310523659561590543))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 1310523659561590543),
      name: 'ImageResponseModel',
      lastPropertyId: const obx_int.IdUid(4, 7092876406203722074),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4230685121178407506),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8787570860125449570),
            name: 'base64',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6908526162263276688),
            name: 'finishReason',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7092876406203722074),
            name: 'seed',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(2, 1310523659561590543),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(2, 4393088303053281707),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [6109473459941957767],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    GenerateResponseModel: obx_int.EntityDefinition<GenerateResponseModel>(
        model: _entities[0],
        toOneRelations: (GenerateResponseModel object) => [],
        toManyRelations: (GenerateResponseModel object) => {
              obx_int.RelInfo<GenerateResponseModel>.toMany(2, object.id!):
                  object.artifacts
            },
        getId: (GenerateResponseModel object) => object.id,
        setId: (GenerateResponseModel object, int id) {
          object.id = id;
        },
        objectToFB: (GenerateResponseModel object, fb.Builder fbb) {
          fbb.startTable(2);
          fbb.addInt64(0, object.id ?? 0);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final object = GenerateResponseModel(id: idParam);
          obx_int.InternalToManyAccess.setRelInfo<GenerateResponseModel>(
              object.artifacts,
              store,
              obx_int.RelInfo<GenerateResponseModel>.toMany(2, object.id!));
          return object;
        }),
    ImageResponseModel: obx_int.EntityDefinition<ImageResponseModel>(
        model: _entities[1],
        toOneRelations: (ImageResponseModel object) => [],
        toManyRelations: (ImageResponseModel object) => {},
        getId: (ImageResponseModel object) => object.id,
        setId: (ImageResponseModel object, int id) {
          object.id = id;
        },
        objectToFB: (ImageResponseModel object, fb.Builder fbb) {
          final base64Offset =
              object.base64 == null ? null : fbb.writeString(object.base64!);
          final finishReasonOffset = object.finishReason == null
              ? null
              : fbb.writeString(object.finishReason!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, base64Offset);
          fbb.addOffset(2, finishReasonOffset);
          fbb.addInt64(3, object.seed);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final base64Param = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final finishReasonParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final seedParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final object = ImageResponseModel(
              base64: base64Param,
              finishReason: finishReasonParam,
              seed: seedParam,
              id: idParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [GenerateResponseModel] entity fields to define ObjectBox queries.
class GenerateResponseModel_ {
  /// See [GenerateResponseModel.id].
  static final id = obx.QueryIntegerProperty<GenerateResponseModel>(
      _entities[0].properties[0]);

  /// see [GenerateResponseModel.artifacts]
  static final artifacts =
      obx.QueryRelationToMany<GenerateResponseModel, ImageResponseModel>(
          _entities[0].relations[0]);
}

/// [ImageResponseModel] entity fields to define ObjectBox queries.
class ImageResponseModel_ {
  /// See [ImageResponseModel.id].
  static final id =
      obx.QueryIntegerProperty<ImageResponseModel>(_entities[1].properties[0]);

  /// See [ImageResponseModel.base64].
  static final base64 =
      obx.QueryStringProperty<ImageResponseModel>(_entities[1].properties[1]);

  /// See [ImageResponseModel.finishReason].
  static final finishReason =
      obx.QueryStringProperty<ImageResponseModel>(_entities[1].properties[2]);

  /// See [ImageResponseModel.seed].
  static final seed =
      obx.QueryIntegerProperty<ImageResponseModel>(_entities[1].properties[3]);
}
